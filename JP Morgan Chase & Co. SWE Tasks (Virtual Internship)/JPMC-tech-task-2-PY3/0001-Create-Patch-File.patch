From 5fa559dd99d5e7e6208f3bb66f02c295a03a23b9 Mon Sep 17 00:00:00 2001
From: Aarav Makadia <aaravcollegeinfo@gmail.com>
Date: Fri, 10 Apr 2020 22:29:36 -0400
Subject: [PATCH] Create Patch File

---
 src/App.tsx   | 36 +++++++++++++++++++-----------------
 src/Graph.tsx | 18 ++++++++++++++++--
 2 files changed, 35 insertions(+), 19 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..7af3c67 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -19,9 +20,8 @@ class App extends Component<{}, IState> {
     super(props);
 
     this.state = {
-      // data saves the server responds.
-      // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,18 +29,28 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if (this.state.showGraph) {
+      return (<Graph data={this.state.data}/>) 
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let x = 0;
+    const interval = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        this.setState({
+          data: serverResponds,
+          showGraph: true,
+        });
+      });
+      x++;
+      if (x>1000) {
+        clearInterval(interval);
+      }
+    }, 100);
   }
 
   /**
@@ -53,15 +63,7 @@ class App extends Component<{}, IState> {
           Bank & Merge Co Task 2
         </header>
         <div className="App-content">
-          <button className="btn btn-primary Stream-button"
-            // when button is click, our react app tries to request
-            // new data from the server.
-            // As part of your task, update the getDataFromServer() function
-            // to keep requesting the data every 100ms until the app is closed
-            // or the server does not return anymore data.
-            onClick={() => {this.getDataFromServer()}}>
-            Start Streaming Data
-          </button>
+          <button className="btn btn-primary Stream-button"></button>
           <div className="Graph">
             {this.renderGraph()}
           </div>
diff --git a/src/Graph.tsx b/src/Graph.tsx
index ec1430e..1a2e10e 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -49,6 +49,20 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      // kind of graph we wanted to visualize the data as
+      elem.setAttribute('view', 'y_line');
+      // what will allow us to distinguish stock ABC with DEF
+      elem.setAttribute('column-pivots', '["stock"]');
+      //  takes care of our x-axis. Without this, x-axis is blank
+      elem.setAttribute('row-pivots', '["timestamp"]');
+      // allow us to only focus on a particular part of a stockâ€™s data along the y-axis
+      elem.setAttribute('column', '["top_ask_price"]');
+      //  allow us to handle the duplicated data we observed earlier and consolidate them as just one data point
+      elem.setAttribute('aggregates', `
+        {"stock":"distinct count",
+      "top_ask_price":"avg",
+      "top_bid_price":"avg",
+      "timestamp":"distinct count"}`);
     }
   }
 
-- 
2.26.0.windows.1

